<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Toolfactory.Util</name>
    </assembly>
    <members>
        <member name="T:Toolfactory.Util.ICompress">
            <summary>
            Allows compression and decompression of Strings
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Toolfactory.Util.ICompress.Compress(System.String)">
            <summary>
            Compress a string
            </summary>
            <param name="str"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Toolfactory.Util.ICompress.Decompress(System.String)">
            <summary>
            Decompress a string
            </summary>
            <param name="str"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Toolfactory.Util.ICompress.CompressAsync(System.String)">
            <summary>
            Compress a string asynchronously
            </summary>
            <param name="str"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Toolfactory.Util.ICompress.DecompressAsync(System.String)">
            <summary>
            Decompress a string asynchronously
            </summary>
            <param name="str"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:Toolfactory.Util.Zip">
            <summary>
                Zip implementation of compressor
            </summary>
        </member>
        <member name="M:Toolfactory.Util.Zip.Compress(System.String)">
            <summary>
                Compress using Zip
            </summary>
            <param name="original"></param>
            <returns></returns>
        </member>
        <member name="M:Toolfactory.Util.Zip.Decompress(System.String)">
            <summary>
                Decompress using GzipStream
            </summary>
            <param name="compressed"></param>
            <returns></returns>
        </member>
        <member name="M:Toolfactory.Util.Zip.CompressAsync(System.String)">
            <summary>
            Compress a string asynchronoulsy
            </summary>
            <param name="original"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Toolfactory.Util.Zip.DecompressAsync(System.String)">
            <summary>
            Decompress a string asynchronously
            </summary>
            <param name="compressed"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:Toolfactory.Util.Cryptography.BaseSymmetricCrypto">
            <summary>
                Base class used to implement symmetric cryptographic algorithms
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Toolfactory.Util.Cryptography.BaseSymmetricCrypto.EncryptData(System.String)">
            <summary>
                Encrypts the data using a symmetric algorithm
            </summary>
            <param name="data">Data to encrypt</param>
            <returns>Base64 string representation of the encrypted data</returns>
            <remarks></remarks>
        </member>
        <member name="M:Toolfactory.Util.Cryptography.BaseSymmetricCrypto.DecryptData(System.String)">
            <summary>
                Decrypt the data using a symmetric algorithm
            </summary>
            <param name="data">Data to decrypt, represented as a base64 string</param>
            <returns>The decrypted data</returns>
            <remarks></remarks>
        </member>
        <member name="M:Toolfactory.Util.Cryptography.BaseSymmetricCrypto.EncryptDataAsync(System.String)">
            <summary>
                Encrypts the data using a symmetric algorithm
            </summary>
            <param name="data">Data to encrypt</param>
            <returns>Base64 string representation of the encrypted data</returns>
            <remarks></remarks>
        </member>
        <member name="M:Toolfactory.Util.Cryptography.BaseSymmetricCrypto.DecryptDataAsync(System.String)">
            <summary>
                Decrypt the data using a symmetric algorithm
            </summary>
            <param name="data">Data to decrypt, represented as a base64 string</param>
            <returns>The decrypted data</returns>
            <remarks></remarks>
        </member>
        <member name="M:Toolfactory.Util.Cryptography.BaseSymmetricCrypto.GetSymmetricAlgorithmName">
            <summary>
                Returns the symmetric algorithm name to use for encryption/decryption
            </summary>
            <returns>The algorithm name to use for encryption/decryption</returns>
            <remarks></remarks>
        </member>
        <member name="M:Toolfactory.Util.Cryptography.BaseSymmetricCrypto.GetSymmetricAlgorithmKey">
            <summary>
                Returns the key used to encrypt/decrypt the data
            </summary>
            <returns>The key used to encrypt/decrypt the data</returns>
            <remarks></remarks>
        </member>
        <member name="M:Toolfactory.Util.Cryptography.BaseSymmetricCrypto.GetSymmetricAlgorithmIv">
            <summary>
                Returns de Iv byte array used to encrypt/decrypt the data
            </summary>
            <returns>The Iv byte array used to encrypt/decrypt the data</returns>
            <remarks></remarks>
        </member>
        <member name="M:Toolfactory.Util.Cryptography.BaseSymmetricCrypto.GetCryptoAlgorithm">
            <summary>
                Creates the symmetric cryptographic algorithm
            </summary>
            <returns>The symmetric cryptographic algorithm</returns>
            <remarks></remarks>
        </member>
        <member name="T:Toolfactory.Util.Cryptography.Crypter">
            <summary>
            Crypting functions
            </summary>
        </member>
        <member name="M:Toolfactory.Util.Cryptography.Crypter.#cctor">
            <summary>
            Initialize a default crypter CryptoServiceProvider
            </summary>
        </member>
        <member name="M:Toolfactory.Util.Cryptography.Crypter.EncryptData(System.String)">
            <summary>
            Encrypt data using default TripleDES Crypto Service Provider
            </summary>
            <param name="sData">Data to be encrypted</param>
            <returns>Base64-converted representation of the encrypted data</returns>
        </member>
        <member name="M:Toolfactory.Util.Cryptography.Crypter.EncryptDataAsync(System.String)">
            <summary>
            Encrypt data using default TripleDES Crypto Service Provider
            </summary>
            <param name="sData">Data to be encrypted</param>
            <returns>Base64-converted representation of the encrypted data</returns>
        </member>
        <member name="M:Toolfactory.Util.Cryptography.Crypter.EncryptData(System.String,System.Byte[])">
            <summary>
            Encrypt data using custom TripleDES Crypto Service Provider
            </summary>
            <param name="sData">Data to be encrypted</param>
            <param name="secretKey">Secret key for the triple DES algorithm</param>
            <returns>Base64-converted representation of the encrypted data</returns>
        </member>
        <member name="M:Toolfactory.Util.Cryptography.Crypter.EncryptDataAsync(System.String,System.Byte[])">
            <summary>
            Encrypt data using custom TripleDES Crypto Service Provider
            </summary>
            <param name="sData">Data to be encrypted</param>
            <param name="secretKey">Secret key for the triple DES algorithm</param>
            <returns>Base64-converted representation of the encrypted data</returns>
        </member>
        <member name="M:Toolfactory.Util.Cryptography.Crypter.DecryptString(System.String)">
            <summary>
            Decrypt string using a default TripleDES Crypto Service Provider
            </summary>
            <param name="sData">Base64 representation of the encrypted data to be decrypted</param>
            <returns>Decrypted data</returns>
        </member>
        <member name="M:Toolfactory.Util.Cryptography.Crypter.DecryptStringAsync(System.String)">
            <summary>
            Decrypt string using a default TripleDES Crypto Service Provider
            </summary>
            <param name="sData">Base64 representation of the encrypted data to be decrypted</param>
            <returns>Decrypted data</returns>
        </member>
        <member name="M:Toolfactory.Util.Cryptography.Crypter.DecryptString(System.String,System.Byte[])">
            <summary>
            Decrypt string using a custom TripleDES Crypto Service Provider
            </summary>
            <param name="sData">Base64 representation of the encrypted data to be decrypted</param>
            <param name="secretKey">Secret key for the triple DES algorithm</param>
            <returns>Decrypted data</returns>
        </member>
        <member name="M:Toolfactory.Util.Cryptography.Crypter.DecryptStringAsync(System.String,System.Byte[])">
            <summary>
            Decrypt string using a custom TripleDES Crypto Service Provider
            </summary>
            <param name="sData">Base64 representation of the encrypted data to be decrypted</param>
            <param name="secretKey">Secret key for the triple DES algorithm</param>
            <returns>Decrypted data</returns>
        </member>
        <member name="M:Toolfactory.Util.Cryptography.Crypter.EncryptTextToMemory(System.String)">
            <summary>
            Encrypts plain text data into a byte array using the default cryptor
            </summary>
            <param name="plainText"></param>
            <returns></returns>
        </member>
        <member name="M:Toolfactory.Util.Cryptography.Crypter.DecryptTextFromMemory(System.Byte[])">
            <summary>
            Decrypts a byte array into plain text using the default decryptor
            </summary>
            <param name="plainText"></param>
            <returns></returns>
        </member>
        <member name="M:Toolfactory.Util.Cryptography.Crypter.EncryptTextToMemoryAsync(System.String)">
            <summary>
            Encrypts plain text data into a byte array using the default cryptor
            </summary>
            <param name="plainText"></param>
            <returns></returns>
        </member>
        <member name="M:Toolfactory.Util.Cryptography.Crypter.DecryptTextFromMemoryAsync(System.Byte[])">
            <summary>
            Decrypts a byte array into plain text using the default decryptor
            </summary>
            <param name="plainText"></param>
            <returns></returns>
        </member>
        <member name="M:Toolfactory.Util.Cryptography.Crypter.EncryptStringToBytes(System.String,System.Security.Cryptography.ICryptoTransform)">
            <summary>
            Encrypts plain text data into a byte array using a custom cryptor
            </summary>
            <param name="plainText">text to be encrypted</param>
            <param name="encryptor">Custom encryptor</param>
            <returns>Byte array of encrypted data</returns>
        </member>
        <member name="M:Toolfactory.Util.Cryptography.Crypter.DecryptStringFromBytes(System.Byte[],System.Security.Cryptography.ICryptoTransform)">
            <summary>
            Decrypts a byte array into plain text using a custom decryptor
            </summary>
            <param name="cipherText">Byte-array representing a crypted text</param>
            <param name="decryptor">Custom decryptor</param>
            <returns></returns>
        </member>
        <member name="M:Toolfactory.Util.Cryptography.Crypter.EncryptStringToBytesAsync(System.String,System.Security.Cryptography.ICryptoTransform)">
            <summary>
            Encrypts plain text data into a byte array using a custom cryptor
            </summary>
            <param name="plainText">text to be encrypted</param>
            <param name="encryptor">Custom encryptor</param>
            <returns>Byte array of encrypted data</returns>
        </member>
        <member name="M:Toolfactory.Util.Cryptography.Crypter.DecryptStringFromBytesAsync(System.Byte[],System.Security.Cryptography.ICryptoTransform)">
            <summary>
            Decrypts a byte array into plain text using a custom decryptor
            </summary>
            <param name="cipherText">Byte-array representing a crypted text</param>
            <param name="decryptor">Custom decryptor</param>
            <returns></returns>
        </member>
        <member name="T:Toolfactory.Util.Cryptography.ICrypter">
            <summary>
            Crypting interface
            </summary>
        </member>
        <member name="M:Toolfactory.Util.Cryptography.ICrypter.EncryptToBytes(System.String)">
            <summary>
                Encrypts plain text data into a byte array using the default cryptor
            </summary>
            <param name="unencryptedString"></param>
            <returns></returns>
        </member>
        <member name="M:Toolfactory.Util.Cryptography.ICrypter.EncryptToBytesAsync(System.String)">
            <summary>
                Encrypts plain text data into a byte array using the default cryptor
            </summary>
            <param name="unencryptedString"></param>
            <returns></returns>
        </member>
        <member name="M:Toolfactory.Util.Cryptography.ICrypter.DecryptFromBytes(System.Byte[])">
            <summary>
                Decrypts a byte array into plain text using the default decryptor
            </summary>
            <param name="encryptedBytes"></param>
            <returns></returns>
        </member>
        <member name="M:Toolfactory.Util.Cryptography.ICrypter.DecryptFromBytesAsync(System.Byte[])">
            <summary>
                Decrypts a byte array into plain text using the default decryptor
            </summary>
            <param name="encryptedBytes"></param>
            <returns></returns>
        </member>
        <member name="M:Toolfactory.Util.Cryptography.ICrypter.Encrypt(System.String)">
            <summary>
                Encrypt data using a default Crypto Service Provider
            </summary>
            <param name="unencryptedString">Data to be encrypted</param>
            <returns>Base64-converted representation of the encrypted data</returns>
        </member>
        <member name="M:Toolfactory.Util.Cryptography.ICrypter.EncryptAsync(System.String)">
            <summary>
                Encrypt data using default TripleDES Crypto Service Provider
            </summary>
            <param name="unencryptedString">Data to be encrypted</param>
            <returns>Base64-converted representation of the encrypted data</returns>
        </member>
        <member name="M:Toolfactory.Util.Cryptography.ICrypter.Decrypt(System.String)">
            <summary>
                Decrypt string using a default TripleDES Crypto Service Provider
            </summary>
            <param name="encryptedString">Base64 representation of the encrypted data to be decrypted</param>
            <returns>Decrypted data</returns>
        </member>
        <member name="M:Toolfactory.Util.Cryptography.ICrypter.DecryptAsync(System.String)">
            <summary>
                Decrypt string using a default TripleDES Crypto Service Provider
            </summary>
            <param name="encryptedString">Base64 representation of the encrypted data to be decrypted</param>
            <returns>Decrypted data</returns>
        </member>
        <member name="M:Toolfactory.Util.Cryptography.ICrypter.EncryptToBytes(System.String,System.Security.Cryptography.ICryptoTransform)">
            <summary>
                Encrypts plain text data into a byte array using a custom cryptor
            </summary>
            <param name="unencryptedString">text to be encrypted</param>
            <param name="encryptor">Custom encryptor</param>
            <returns>Byte array of encrypted data</returns>
        </member>
        <member name="M:Toolfactory.Util.Cryptography.ICrypter.EncryptToBytesAsync(System.String,System.Security.Cryptography.ICryptoTransform)">
            <summary>
                Encrypts plain text data into a byte array using a custom cryptor
            </summary>
            <param name="unencryptedString">text to be encrypted</param>
            <param name="encryptor">Custom encryptor</param>
            <returns>Byte array of encrypted data</returns>
        </member>
        <member name="M:Toolfactory.Util.Cryptography.ICrypter.Encrypt(System.String,System.Byte[])">
            <summary>
                Encrypt data using custom Crypto Service Provider
            </summary>
            <param name="unencryptedString">Data to be encrypted</param>
            <param name="secretKey">Secret key for the triple DES algorithm</param>
            <returns>Base64-converted representation of the encrypted data</returns>
        </member>
        <member name="M:Toolfactory.Util.Cryptography.ICrypter.EncryptAsync(System.String,System.Byte[])">
            <summary>
                Encrypt data using custom TripleDES Crypto Service Provider
            </summary>
            <param name="unencryptedString">Data to be encrypted</param>
            <param name="secretKey">Secret key for the triple DES algorithm</param>
            <returns>Base64-converted representation of the encrypted data</returns>
        </member>
        <member name="M:Toolfactory.Util.Cryptography.ICrypter.Decrypt(System.String,System.Byte[])">
            <summary>
                Decrypt string using a custom TripleDES Crypto Service Provider
            </summary>
            <param name="encryptedString">Base64 representation of the encrypted data to be decrypted</param>
            <param name="secretKey">Secret key for the triple DES algorithm</param>
            <returns>Decrypted data</returns>
        </member>
        <member name="M:Toolfactory.Util.Cryptography.ICrypter.DecryptAsync(System.String,System.Byte[])">
            <summary>
                Decrypt string using a custom TripleDES Crypto Service Provider
            </summary>
            <param name="encryptedString">Base64 representation of the encrypted data to be decrypted</param>
            <param name="secretKey">Secret key for the triple DES algorithm</param>
            <returns>Decrypted data</returns>
        </member>
        <member name="M:Toolfactory.Util.Cryptography.ICrypter.DecryptFromBytes(System.Byte[],System.Security.Cryptography.ICryptoTransform)">
            <summary>
                Decrypts a byte array into plain text using a custom decryptor
            </summary>
            <param name="cipherText">Byte-array representing a crypted text</param>
            <param name="decryptor">Custom decryptor</param>
            <returns></returns>
        </member>
        <member name="M:Toolfactory.Util.Cryptography.ICrypter.DecryptFromBytesAsync(System.Byte[],System.Security.Cryptography.ICryptoTransform)">
            <summary>
                Decrypts a byte array into plain text using a custom decryptor
            </summary>
            <param name="cipherText">Byte-array representing a crypted text</param>
            <param name="decryptor">Custom decryptor</param>
            <returns></returns>
        </member>
        <member name="T:Toolfactory.Util.Cryptography.Md5">
            <summary>
            MD5
            </summary>
        </member>
        <member name="M:Toolfactory.Util.Cryptography.Md5.#ctor">
            <summary>
            Default protected constructor. No public instantiation allowed.
            </summary>
        </member>
        <member name="M:Toolfactory.Util.Cryptography.Md5.CalculateMd5Hash(System.String)">
            <summary>
            Calculates the MD5 hash for a specified string
            </summary>
            <param name="fromString">The original string used to calculate the MD5 hash</param>
            <returns>The MD5 hash corresponding to the specified string</returns>
            <remarks></remarks>
        </member>
        <member name="T:Toolfactory.Util.Cryptography.SymmetricDES">
            <summary>
                Base class for symmetric crypto
            </summary>
        </member>
        <member name="M:Toolfactory.Util.Cryptography.SymmetricDES.GetSymmetricAlgorithmName">
            <summary>
            Returns the symmetric algorithm name to use for encryption/decryption
            </summary>
            <returns>The algorithm name to use for encryption/decryption</returns>
            <remarks></remarks>
        </member>
        <member name="M:Toolfactory.Util.Cryptography.SymmetricDES.GetSymmetricAlgorithmIv">
            <summary>
            Returns de Iv byte array used to encrypt/decrypt the data
            </summary>
            <returns>The Iv byte array used to encrypt/decrypt the data</returns>
            <remarks></remarks>
        </member>
        <member name="M:Toolfactory.Util.Cryptography.SymmetricDES.GetSymmetricAlgorithmKey">
            <summary>
            Returns the key used to encrypt/decrypt the data
            </summary>
            <returns>The key used to encrypt/decrypt the data</returns>
            <remarks></remarks>
        </member>
        <member name="T:Toolfactory.Util.Cryptography.ToolfactoryCrypter">
            <summary>
            Triple DES crypter
            </summary>
        </member>
        <member name="F:Toolfactory.Util.Cryptography.ToolfactoryCrypter.DefaultCryptoServiceProvider">
            <summary>
            Default encryptor
            </summary>
        </member>
        <member name="M:Toolfactory.Util.Cryptography.ToolfactoryCrypter.#cctor">
            <summary>
            Initialize a default crypter CryptoServiceProvider
            </summary>
        </member>
        <member name="M:Toolfactory.Util.Cryptography.ToolfactoryCrypter.Encrypt(System.String)">
            <summary>
                Encrypt data using a default Crypto Service Provider
            </summary>
            <param name="unencryptedString">Data to be encrypted</param>
            <returns>Base64-converted representation of the encrypted data</returns>
        </member>
        <member name="M:Toolfactory.Util.Cryptography.ToolfactoryCrypter.Encrypt(System.String,System.Byte[])">
            <summary>
                Encrypt data using custom Crypto Service Provider
            </summary>
            <param name="unencryptedString">Data to be encrypted</param>
            <param name="secretKey">Secret key for the triple DES algorithm</param>
            <returns>Base64-converted representation of the encrypted data</returns>
        </member>
        <member name="M:Toolfactory.Util.Cryptography.ToolfactoryCrypter.Decrypt(System.String)">
            <summary>
                Decrypt string using a default TripleDES Crypto Service Provider
            </summary>
            <param name="encryptedString">Base64 representation of the encrypted data to be decrypted</param>
            <returns>Decrypted data</returns>
        </member>
        <member name="M:Toolfactory.Util.Cryptography.ToolfactoryCrypter.Decrypt(System.String,System.Byte[])">
            <summary>
                Decrypt string using a custom TripleDES Crypto Service Provider
            </summary>
            <param name="encryptedString">Base64 representation of the encrypted data to be decrypted</param>
            <param name="secretKey">Secret key for the triple DES algorithm</param>
            <returns>Decrypted data</returns>
        </member>
        <member name="M:Toolfactory.Util.Cryptography.ToolfactoryCrypter.EncryptAsync(System.String)">
            <summary>
                Encrypt data using default TripleDES Crypto Service Provider
            </summary>
            <param name="unencryptedString">Data to be encrypted</param>
            <returns>Base64-converted representation of the encrypted data</returns>
        </member>
        <member name="M:Toolfactory.Util.Cryptography.ToolfactoryCrypter.EncryptAsync(System.String,System.Byte[])">
            <summary>
                Encrypt data using custom TripleDES Crypto Service Provider
            </summary>
            <param name="unencryptedString">Data to be encrypted</param>
            <param name="secretKey">Secret key for the triple DES algorithm</param>
            <returns>Base64-converted representation of the encrypted data</returns>
        </member>
        <member name="M:Toolfactory.Util.Cryptography.ToolfactoryCrypter.DecryptAsync(System.String)">
            <summary>
                Decrypt string using a default TripleDES Crypto Service Provider
            </summary>
            <param name="encryptedString">Base64 representation of the encrypted data to be decrypted</param>
            <returns>Decrypted data</returns>
        </member>
        <member name="M:Toolfactory.Util.Cryptography.ToolfactoryCrypter.DecryptAsync(System.String,System.Byte[])">
            <summary>
                Decrypt string using a custom TripleDES Crypto Service Provider
            </summary>
            <param name="encryptedString">Base64 representation of the encrypted data to be decrypted</param>
            <param name="secretKey">Secret key for the triple DES algorithm</param>
            <returns>Decrypted data</returns>
        </member>
        <member name="M:Toolfactory.Util.Cryptography.ToolfactoryCrypter.EncryptToBytes(System.String)">
            <summary>
                Encrypts plain text data into a byte array using the default cryptor
            </summary>
            <param name="unencryptedString"></param>
            <returns></returns>
        </member>
        <member name="M:Toolfactory.Util.Cryptography.ToolfactoryCrypter.EncryptToBytes(System.String,System.Security.Cryptography.ICryptoTransform)">
            <summary>
                Encrypts plain text data into a byte array using a custom cryptor
            </summary>
            <param name="unencryptedString">text to be encrypted</param>
            <param name="encryptor">Custom encryptor</param>
            <returns>Byte array of encrypted data</returns>
        </member>
        <member name="M:Toolfactory.Util.Cryptography.ToolfactoryCrypter.DecryptFromBytes(System.Byte[])">
            <summary>
                Decrypts a byte array into plain text using the default decryptor
            </summary>
            <param name="encryptedBytes"></param>
            <returns></returns>
        </member>
        <member name="M:Toolfactory.Util.Cryptography.ToolfactoryCrypter.DecryptFromBytes(System.Byte[],System.Security.Cryptography.ICryptoTransform)">
            <summary>
                Decrypts a byte array into plain text using a custom decryptor
            </summary>
            <param name="cipherText">Byte-array representing a crypted text</param>
            <param name="decryptor">Custom decryptor</param>
            <returns></returns>
        </member>
        <member name="M:Toolfactory.Util.Cryptography.ToolfactoryCrypter.EncryptToBytesAsync(System.String)">
            <summary>
                Encrypts plain text data into a byte array using the default cryptor
            </summary>
            <param name="unencryptedString"></param>
            <returns></returns>
        </member>
        <member name="M:Toolfactory.Util.Cryptography.ToolfactoryCrypter.EncryptToBytesAsync(System.String,System.Security.Cryptography.ICryptoTransform)">
            <summary>
                Encrypts plain text data into a byte array using a custom cryptor
            </summary>
            <param name="unencryptedString">text to be encrypted</param>
            <param name="encryptor">Custom encryptor</param>
            <returns>Byte array of encrypted data</returns>
        </member>
        <member name="M:Toolfactory.Util.Cryptography.ToolfactoryCrypter.DecryptFromBytesAsync(System.Byte[])">
            <summary>
                Decrypts a byte array into plain text using the default decryptor
            </summary>
            <param name="encryptedBytes"></param>
            <returns></returns>
        </member>
        <member name="M:Toolfactory.Util.Cryptography.ToolfactoryCrypter.DecryptFromBytesAsync(System.Byte[],System.Security.Cryptography.ICryptoTransform)">
            <summary>
                Decrypts a byte array into plain text using a custom decryptor
            </summary>
            <param name="cipherText">Byte-array representing a crypted text</param>
            <param name="decryptor">Custom decryptor</param>
            <returns></returns>
        </member>
        <member name="T:Toolfactory.Util.PBKDF2">
            <summary>
                Implements password-based key derivation functionality, PBKDF2, by using a pseudo-random number generator 
                based on HMACSHA1 (https://msdn.microsoft.com/es-es/library/system.security.cryptography.rfc2898derivebytes.aspx)
            </summary>
        </member>
        <member name="M:Toolfactory.Util.PBKDF2.EncryptData(System.String,System.String)">
            <summary>
                Encrypts the passed data string and returns the encrypted value in base-64 format.
            </summary>
            <param name="unencryptedString"></param>
            <param name="password">Password</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Toolfactory.Util.PBKDF2.DecryptData(System.String,System.String)">
            <summary>
                Decrypts an encrypted data formatted in base-64
            </summary>
            <param name="encryptedData"></param>
            <param name="password">Password</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Toolfactory.Util.PBKDF2.EncryptDataAsync(System.String,System.String)">
            <summary>
                Encrypts the passed data string and returns the encrypted value in base-64 format.
            </summary>
            <param name="data"></param>
            <param name="password">Password</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Toolfactory.Util.PBKDF2.DecryptDataAsync(System.String,System.String)">
            <summary>
                Decrypts an encrypted data formatted in base-64
            </summary>
            <param name="encryptedData"></param>
            <param name="password">Password</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Toolfactory.Util.PBKDF2.TryEncryptData(System.String,System.String@,System.String)">
            <summary>
                Encrypts data into encryptedData parameter. Returns True if the data has been encrypted without errors. False
                otherwise.
            </summary>
            <param name="data"></param>
            <param name="encryptedData"></param>
            <param name="password">Password</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Toolfactory.Util.PBKDF2.TryDecryptData(System.String,System.String@,System.String)">
            <summary>
                Decrypts data into decryptedData parameter. Returns True if the data has been decrypted without errors. False
                otherwise.
            </summary>
            <param name="encryptedData"></param>
            <param name="decryptedData"></param>
            <param name="password">Password</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Toolfactory.Util.PBKDF2.IsDecryptable(System.String)">
            <summary>
                Returns True if the data can be decrypted. False if the data has not a valid base-64 format or is being decrypted
                with invalid password/salt/iteration
            </summary>
            <param name="encryptedData"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Toolfactory.Util.PBKDF2.IsDecryptableAsync(System.String)">
            <summary>
                Returns True if the data can be decrypted. False if the data has not a valid base-64 format or is being decrypted
                with invalid password/salt/iteration
            </summary>
            <param name="encryptedData"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:Toolfactory.Util.FileCompare">
            <summary>
                Comparing of files
            </summary>
        </member>
        <member name="M:Toolfactory.Util.FileCompare.#ctor">
            <summary>
            Default protected constructor. No public instantiation allowed.
            </summary>
        </member>
        <member name="M:Toolfactory.Util.FileCompare.Compare(System.String,System.String)">
            <summary>
                Compare two files
            </summary>
            <param name="file1">Path of file 1</param>
            <param name="file2">Path of file 2</param>
            <returns></returns>
        </member>
        <member name="T:Toolfactory.Util.UncPath">
            <summary>
            Utils to work with UNC paths
            </summary>
        </member>
        <member name="M:Toolfactory.Util.UncPath.#ctor">
            <summary>
            Default protected constructor. No public instantiation allowed.
            </summary>
        </member>
        <member name="M:Toolfactory.Util.UncPath.QuickAccessibilityCheck(System.String)">
            <summary>
            Checks whether the network path is accessible/connected/existing
            </summary>
            <param name="path">The path to be checked</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Toolfactory.Util.UncPath.DirectoryExists(System.String,System.Int32)">
            <summary>
            A quick method to test is the path exists 
            </summary>
            <param name="s"></param>
            <param name="timeOutMs"></param>
            <returns></returns>
        </member>
        <member name="M:Toolfactory.Util.UncPath.FileExists(System.String,System.Int32)">
            <summary>
            A quick method to test is the path exists 
            </summary>
            <param name="s"></param>
            <param name="timeOutMs"></param>
            <returns></returns>
        </member>
        <member name="T:Toolfactory.Util.Serializing.Clone">
            <summary>
            Cloning utilitie
            </summary>
        </member>
        <member name="M:Toolfactory.Util.Serializing.Clone.BinaryClone``1(``0)">
            <summary>
            This extension create a new memory clone of an serializable object
            </summary>
            <typeparam name="T"></typeparam>
            <param name="originalObject"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Toolfactory.Util.Serializing.Clone.DeepClone(System.Object)">
            <summary>
            Deep clone using reflection
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Toolfactory.Util.Serializing.Clone.GetBytes(System.Object)">
            <summary>
            Get serialized bytes from an object using NetDataContractSerializer
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Toolfactory.Util.Serializing.Clone.GetFromBytes``1(System.Byte[])">
            <summary>
            Get object from serialized bytes using NetDataContractSerializer
            </summary>
            <typeparam name="T"></typeparam>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="T:Toolfactory.Util.Serializing.CustomSerializer">
            <summary>
                The CustomSerializer allows finer control over the details of the serialization process.
                Internally, it makes use of standard XmlSerializer objects. These serializers are cached
                to improve speed.
                To set serialization options, an XmlWriter is used.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Toolfactory.Util.Serializing.CustomSerializer.Serialize(System.Object,System.Xml.Serialization.XmlSerializerNamespaces,System.Boolean,System.Boolean)">
            <summary>
                Serializes the object to XML based on encoding and name spaces.
            </summary>
            <param name="obj">The object we want to serialize to Xml</param>
            <param name="ns">XmlSerializer namespaces</param>
            <param name="compress">Enable compression</param>
            <param name="omitDeclaration">Whether to omit Xml declarartion or not</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Toolfactory.Util.Serializing.CustomSerializer.Deserialize(System.Byte[],System.Type,System.Boolean)">
            <summary>
                Deserializes an object from a String
            </summary>
            <param name="data">Array bytes</param>
            <param name="type">Type of object</param>
            <param name="decompress">Decompress after deserialize</param>
            <returns>Object</returns>
            <remarks></remarks>
        </member>
        <member name="M:Toolfactory.Util.Serializing.CustomSerializer.SerializeAsString(System.Object,System.Xml.Serialization.XmlSerializerNamespaces,System.Boolean,System.Boolean,System.Text.Encoding)">
            <summary>
                Tries to serialize an object into a string representation in XML
            </summary>
            <param name="obj">The object we want to serialize to Xml</param>
            <param name="ns">XML serializer namespaces</param>
            <param name="compress">Enable compression of the results</param>
            <param name="omitDeclaration">Omit XML declaration first line</param>
            <param name="encoding">Encoding to use. By default, UTF-8. Must be the same to decompress.</param>
            <returns>A string representation of the object</returns>
            <remarks>
                If you choose to enable compression, the bytes returned will be converted to Base64 (Convert.ToBase64String(data))
                so they can be stored and retrieved later with no data loss. This means that if you need
                to inspect the contents of the data stored, you'll need to transform the base64-string to
                an array of bytes and then decompress that array of bytes.
                On the other hand, if you choose no compression, the BOM bytes are removed so XML deserializers
                do not complain about strange characters into the string.
            </remarks>
        </member>
        <member name="M:Toolfactory.Util.Serializing.CustomSerializer.Deserialize(System.String,System.Type,System.Boolean,System.Text.Encoding)">
            <summary>
                Tries to deserialize a string into an object of the specified type
            </summary>
            <param name="data">A string representation of the object in XML (prossibly compressed)</param>
            <param name="type">type of the object we try to deserialize</param>
            <param name="decompress">Indicate whether the object has to be decompressed prior to deserialization</param>
            <param name="encoding">Encoding to use. By default, UTF-8. Must be the same used to compress.</param>
            <returns>An object</returns>
            <remarks></remarks>
        </member>
        <member name="M:Toolfactory.Util.Serializing.CustomSerializer.GetSerializer(System.Type)">
            <summary>
                Caching of serializer objects
            </summary>
            <param name="type"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:Toolfactory.Util.Serializing.PlainXmlSerializer">
            <summary>
            Provides methods to serialize/deserialize objects to/from XML strings
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Toolfactory.Util.Serializing.PlainXmlSerializer.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Toolfactory.Util.Serializing.PlainXmlSerializer.Serialize(System.Object,System.Boolean,System.Boolean)">
            <summary>
            Serializes an object into a XML string
            </summary>
            <param name="data">The object to serialize</param>
            <param name="preserveHeaders">When True, the XML version header will be put in the returned XML string</param>
            <param name="preserveNamespace">When True, the namespaces of the different nodes of the XML string will be preserved.</param>
            <returns>A XML string representing the object</returns>
            <remarks></remarks>
            <exception cref="T:System.InvalidOperationException">The object cannot be serialized. See InnerException for further information.</exception>
        </member>
        <member name="M:Toolfactory.Util.Serializing.PlainXmlSerializer.Deserialize``1(System.String)">
            <summary>
            Deserializes a XML string into an object of type T
            </summary>
            <typeparam name="T">The type of the object to be deserialized from the XML string</typeparam>
            <param name="xml">The XML string represent the object to be deserialized</param>
            <returns>An instance of the object of type T deserialized from the XML string</returns>
            <remarks></remarks>
            <exception cref="T:System.InvalidCastException">When the resulting deserialized object cannot be converted to the specified type T</exception>
        </member>
        <member name="T:Toolfactory.Util.Serializing.Serializer">
            <summary>
            This class allows serialization/deserialization operations with or without compression.
            This is the preferred class to perform serialization.
            Unless you need specific serialization options, use this class. The CustomSerializer class is available
            for special serialization options.
            The Serializar class uses a NetDataContractSerializer object to perform actual serialization. This
            serializer includes information about .NET types into the serialized object, thus making it
            ideal for transferring information through networks (hence its name)
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Toolfactory.Util.Serializing.Serializer.Serialize(System.Object)">
            <summary>
            Serializes an object to an array of bytes using a Net Datacontract serializer.
            </summary>
            <param name="obj">Object</param>
            <returns>Array bytes</returns>
            <remarks></remarks>
        </member>
        <member name="M:Toolfactory.Util.Serializing.Serializer.SerializeAndCompress(System.Object)">
            <summary>
            Serializes and compresses an object into an array of bytes using a Net Datacontract serializer.
            </summary>
            <param name="obj">Object</param>
            <returns>Array bytes</returns>
            <remarks></remarks>
        </member>
        <member name="M:Toolfactory.Util.Serializing.Serializer.Deserialize(System.Byte[])">
            <summary>
            Deserializes an object from an array of bytes.
            </summary>
            <param name="data">Array bytes</param>
            <returns>Object</returns>
            <remarks></remarks>
        </member>
        <member name="M:Toolfactory.Util.Serializing.Serializer.DecompressAndDeserialize(System.Byte[])">
            <summary>
            Decompresses and deserializes an object from an array of bytes.
            </summary>
            <param name="data">Array bytes</param>
            <returns>Object</returns>
            <remarks></remarks>
        </member>
        <member name="M:Toolfactory.Util.Serializing.Serializer.Compress(System.Byte[])">
            <summary>
            Plain gzip compress
            </summary>
            <param name="data"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Toolfactory.Util.Serializing.Serializer.Decompress(System.Byte[])">
            <summary>
            Plain gzip decompress
            </summary>
            <param name="data"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Toolfactory.Util.Serializing.Serializer.SerializeAsString(System.Object,System.Text.Encoding)">
            <summary>
            Serializes an object into a string using a Net Datacontract serializer.
            </summary>
            <param name="obj">Object</param>
            <param name="encoding">Encoding</param>
            <returns>String of the serilized object</returns>
            <remarks>Using conversion to/from a string is not recommended, since it makes use
            of String conversions to UTF-8 or Base64 values, thus consuming unnecessary resources. 
            It's best to use the Byte() versions of the serialization.
            If you choose not to apply compression, the BOM bytes are removed so XML deserializers 
            do not complain about strange characters into the string.
            </remarks>
        </member>
        <member name="M:Toolfactory.Util.Serializing.Serializer.SerializeAndCompressAsString(System.Object)">
            <summary>
            Serializes and compresses an object into a string using a Net Datacontract serializer.
            </summary>
            <param name="obj">Object</param>
            <returns>String of the serilized object</returns>
            <remarks>Using conversion to/from a string is not recommended, since it makes use
            of String conversions to UTF-8 or Base64 values, thus consuming unnecessary resources. 
            It's best to use the Byte() versions of the serialization.
            If you choose to enable compression, the bytes returned will be converted to Base64 (Convert.ToBase64String(data))
            so they can be stored and retrieved later with no data loss. This means that if you need
            to inspect the contents of the data stored, you'll need to transform the base64-string to
            an array of bytes and then decompress that array of bytes.
            </remarks>
        </member>
        <member name="M:Toolfactory.Util.Serializing.Serializer.Deserialize(System.String,System.Text.Encoding)">
            <summary>
            Deserializes a serialized object contained into a string using a Net Datacontract serializer.
            </summary>
            <param name="data"></param>
            <param name="encoding">Encoding</param>
            <returns></returns>
            <remarks>Using conversion to/from a string is not recommended, since it makes use
            of String conversions to UTF-8 or Base64 values, thus consuming unnecessary resources. 
            It's best to use the Byte() versions of the serialization.
            </remarks>
        </member>
        <member name="M:Toolfactory.Util.Serializing.Serializer.DecompressAndDeserialize(System.String)">
            <summary>
            Decompresses and then deserializes a serialized object from a string using a Net Datacontract serializer.
            </summary>
            <param name="data"></param>
            <returns></returns>
            <remarks>Using conversion to/from a string is not recommended, since it makes use
            of String conversions to UTF-8 or Base64 values, thus consuming unnecessary resources. 
            It's best to use the Byte() versions of the serialization.
            </remarks>
        </member>
        <member name="M:Toolfactory.Util.Serializing.Serializer.Serialize(System.Object,System.Boolean)">
            <summary>
            Serializes and optionally compresses an object to an array of bytes using a Net Datacontract serializer.
            </summary>
            <param name="obj">Object</param>
            <param name="compress">Set to true if compression should be applied after serialization</param>
            <returns>Array bytes</returns>
            <remarks></remarks>
        </member>
        <member name="M:Toolfactory.Util.Serializing.Serializer.SerializeAsString(System.Object,System.Boolean)">
            <summary>
            Serializes and optionally compresses an object into a string using a Net Datacontract serializer.
            </summary>
            <param name="obj">Object</param>
            <param name="compress">Set to true if compression should be applied after serialization</param>
            <returns>Array bytes</returns>
            <remarks>Using conversion to/from a string is not recommended, since it makes use
            of String conversions to UTF-8 or Base64 values, thus consuming unnecessary resources. 
            It's best to use the Byte() versions of the serialization.
            </remarks>
        </member>
        <member name="M:Toolfactory.Util.Serializing.Serializer.Deserialize(System.Byte[],System.Boolean)">
            <summary>
            Deserializes an object from an array of bytes. Optionally a decompression can be applied prior to deserialization.
            </summary>
            <param name="bytes">Array bytes</param>
            <param name="decompress">Set to true if decompression should be applied before deserialization</param>
            <returns>Object</returns>
            <remarks></remarks>
        </member>
        <member name="M:Toolfactory.Util.Serializing.Serializer.Deserialize(System.String,System.Boolean)">
            <summary>
            Deserializes an object from a string. Optionally a decompression can be applied prior to deserialization.
            </summary>
            <param name="data">String containing a gzipped serialized object</param>
            <param name="decompress">Set to true if decompression should be applied before deserialization</param>
            <returns>Object</returns>
            <remarks>Using conversion to/from a string is not recommended, since it makes use
            of String conversions to UTF-8 or Base64 values, thus consuming unnecessary resources. 
            It's best to use the Byte() versions of the serialization.
            </remarks>
        </member>
        <member name="M:Toolfactory.Util.Serializing.Serializer.SerializeAsBytes(System.Object,System.Boolean)">
            <summary>
            Obsolete serialize as bytes
            </summary>
            <param name="obj"></param>
            <param name="compress"></param>
            <returns></returns>
        </member>
        <member name="M:Toolfactory.Util.Serializing.Serializer.SerializeAsString(System.Object,System.Boolean,System.Boolean)">
            <summary>
            Obsolete Serialize as string
            </summary>
            <param name="obj"></param>
            <param name="compress"></param>
            <param name="omitXmlDeclaration"></param>
            <returns></returns>
        </member>
        <member name="M:Toolfactory.Util.Serializing.Serializer.Deserialize(System.String,System.Type,System.Boolean)">
            <summary>
            Deserializes an object from a String
            </summary>
            <param name="xml">Array bytes</param>
            <param name="type">Type of the object</param>
            <param name="decompress">Decompress after deserializing</param>
            <returns>Object</returns>
            <remarks></remarks>
        </member>
    </members>
</doc>
